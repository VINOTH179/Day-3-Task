1.	For the given JSON iterate over all for loops (for, for in, for of, for each).

The ‘For’ Loop
The For Loop comes first because of its simplicity and ease of use. It is a very user-friendly kind of loop that runs with a method of using a counter. 
The value is first set with an appropriate condition, which is also called ‘initializing a loop’. Next, the terminal or final value is specified. The For Loop makes things really easy when you need to run a set of codes multiple times.
The For Loop is further divided into:

1. Using an array
2. Making a loop through DOM elements

1. Using an array
The following piece of code is a perfect example of how to use a for loop through an array. 
var numbers = [ 10, 20, 30, 40, 50] 
for (var i=0; i < numbers.length; i++) {
   console.log(numbers[i])
}


I used all the numbers in an array, then printed each in a console window. In the same way, you can make a loop through an array of strings.

2. Making a loop through DOM elements
The For loop can also be used to alter colors. Consider a situation where you want to choose a particular color for all the anchors of your page. In order to do so, use the following piece of code.
 
var elements = document.querySelectorAll("a");
for (var i=0; i<elements.length; i++) {
   elements[i].style.color = "red";
}

When you look at the above code, things might not seem very clear. 
I first used `document.querySelectorAll("a")` to get all of my anchors in the array format. Once that was done, the next step looped the entire array and changed its color. 
The ‘For In’ Loop
Another way of looping is the For in Loop. Unlike the For Loop, this loop won’t be using a counter. So, this makes the whole process even more simple and hassle-free. In fact, the For in Loop is essentially a simplified version of the For Loop.
The following are different ways of looping using the For In technique.
1. Looping through an Object Property
Here’s an example; you’ve got an object containing some properties and you need to look up each property and its value. Here’s how you would use the For in Loop to do so:

var person = {
   fname: "Nick",
   lname: "Jonas",
   age: 26
}; 
for (let x in person) {
   console.log (x + ": "+ person[x])
}

The For Of Loop
The JavaScript for of statement loops through the values of an iterable object.
It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:
variable - For every iteration, the value of the next property is assigned to the variable. The variable can be declared with const, let, or var.
iterable - An object that has iterable properties.

The ForEach() Loop
This method is used for looping through an array element. Here’s an example of this:
var names = ["jerry", "tom", "pluto", "micky", "mini"];
names.forEach(function1);
function function1(currentValue, index) {
   console.log("Index in array is: "+index + " ::  Value is: "+currentValue);
}


Looping through JSON in more detail with examples
Example 1:
We're making a list of books and we enter the title as “Lord of the Rings” and the year as “1994“and the count of pages as “3000”. Similarly, a large number of objects can be created and once it’s done, we will have a large database:
var books = [
   {
       title: "Lord of the Rings",
       year: 1994,
       pages: 3000
   },
   {
       title: "1984",
       year: 1984,
       pages: 2000
   },
   {
       title: "Art of war",
       year: 2000,
       pages: 5000
   }
]


Now different things can be done with this database.
For example;
alert(books.length);


When we run this, the browser will display three. Essentially, with this, we checked that there are three objects in this array.

2.	create your own resume data in JSON format?


HTML:

<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta charset="UTF-8">
	    <meta http-equiv="X-UA-Compatible" content="IE=edge">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>Document</title>
	</head>
	<body>
	    <h1>Create your own resume data in JSON format
	    </h1>
	    <script src="script.js"></script>
	</body>
	</html>



Script.JS:
let myResume={
	    "basics": {
	      "name": "VINOTH.M",
	      "email": "vinothmagesh9@gamil.com",
	      "phone": 9578741769,
	      "degree": "M.Com",
	      "location": {
	        "address": "150C, Dharga Road, kovalan 2nd Cross Street, Zamin Pallavaram",
	        "postalCode": 600117,
	        "city": "Chennai",
	        "state": "Tamilnadu",
	        "country": "India"
	      },
	      "profiles": [
	        {
	          "website": "https://www.linkedin.com/in/vinoth-m-703189269/",
	          "github":"https://github.com/VINOTH179"
	        }
	      ]
	    },
	    "work": [
	      {
	        "company": "Accenture PVT Ltd",
	        "position": Billing Analyst",
	        "startDate": "2021-10-14",
	        "endDate": "2024-08-15",
	        "summary": "i am the business executive handling various task and gaining lots of experience",
	      },
	    ],
	    "education": [
	      {
	        "institution": "S.I.V.E.T College Of Arts and Science",
	        "department": "Finance",
	        "studyType": "fulltime",
	        "batch start year": 2020,
	        "batch end year": 2022,
	        "gpa": 7.5,
	      }
	    ],
	    "skills": [
	      {
	        "name": "Excel",
	        "level": "beginner",
	        "project": [
	          "Orange Business servies"
	        ]
	      }
	    ],
	    "languages": [
	      {
	        "language": "Tamil,Enlish",
	      }
	    ],
	    "interests": [
	      {
	        "name": "Running,",
	      }
	    ]
	  }
	  console.log(myResume);

3.	Read about the difference between a window screen and document in javascript

Window:

Each browser tab has its own top-level window object. Each <iframe> (and deprecated <frame>) element has its own window object too, nested within a parent window. Each of these windows gets its own separate global object. window. window always refers to the window, but window. parent and window. The top might refer to enclosing windows, giving access to other execution contexts. In addition to the document and screen described below, window properties include
•	setTimeout() and setInterval() binding event handlers to a timer
•	location giving the current URL
•	history with methods back () and forward () giving the tab's mutable history
•	navigator describing the browser software

screen:

The window object also has a screen object with properties describing the physical display:
•	screen properties width and height are the full screen
•	screen properties availWidth and availHeight omit the toolbar
The portion of a screen displaying the rendered document is the viewport in JavaScript, which is potentially confusing because we call an application's portion of the screen a window when talking about interactions with the operating system. The getBoundingClientRect() method of any document element will return an object with top, left, bottom, and right properties describing the location of the element in the viewport.




Document:

Each window object has a document object to be rendered. These objects get confused in part because HTML elements are added to the global object when assigned a unique id. E.g., in the HTML snippet
<body>
  <p id="holyCow"> This is the first paragraph </p>
</body>
the paragraph element can be referenced by any of the following:
•	window.holyCow or window["holyCow"]
•	document.getElementById("holyCow")
•	document.querySelector("#holyCow")
•	document.body.firstChild
•	document.body.children[0]

